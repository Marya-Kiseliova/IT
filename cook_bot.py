#–ë–æ—Ç –≤ Telegram –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º)))

import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from 

import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes
)

BASE_URL = "https://api.spoonacular.com/recipes/complexSearch"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–°—É–ø", "–ì–∞—Ä–Ω–∏—Ä"], ["–ú—è—Å–æ", "–í—Ç–æ—Ä–æ–µ"], ["–ü–∏—Ä–æ–≥", "–î–µ—Å–µ—Ä—Ç"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñüç≥\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø –±–ª—é–¥–∞:",
        reply_markup=reply_markup
    )
    context.user_data.clear()


async def choose_dish_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dish_type = update.message.text.lower()
    context.user_data["dish_type"] = dish_type
    context.user_data["offset"] = 0
    await update.message.reply_text(f"–û–∫, –≤–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è {dish_type} (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")


async def handle_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text in ["–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"]:
        return await handle_navigation(update, context)

    ingredients = [i.strip() for i in update.message.text.split(",")]
    context.user_data["ingredients"] = ingredients
    context.user_data["offset"] = 0
    await send_recipes(update, context)


async def send_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ingredients = context.user_data.get("ingredients", [])
    dish_type = context.user_data.get("dish_type", "main course")
    offset = context.user_data.get("offset", 0)

    params = {
        "apiKey": RECIPE_KEY,
        "includeIngredients": ",".join(ingredients),
        "type": dish_type,
        "number": 3,
        "offset": offset,
        "addRecipeInformation": True,
        "instructionsRequired": True,
    }

    try:
        resp = requests.get(BASE_URL, params=params, timeout=10)
        resp.raise_for_status()
        data = resp.json()
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ API: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    results = data.get("results", [])
    if not results:
        await update.message.reply_text("üòî –ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç. –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞¬ª.")
        return

    for recipe in results:
        title = recipe.get("title")
        link = recipe.get("sourceUrl")
        await update.message.reply_text(f"üç¥ {title}\n{link}")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [["–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)


async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã":
        context.user_data["offset"] = context.user_data.get("offset", 0) + 3
        await send_recipes(update, context)
    elif choice == "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞":
        await start(update, context)


def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^(–°—É–ø|–ì–∞—Ä–Ω–∏—Ä|–ú—è—Å–æ|–í—Ç–æ—Ä–æ–µ|–ü–∏—Ä–æ–≥|–î–µ—Å–µ—Ä—Ç)$"), choose_dish_type))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ingredients))

    app.run_polling()


if __name__ == "__main__":
    main()
